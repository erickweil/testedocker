# Configuração nginx para encaminhar requisições à containers docker visíveis pelo hostname
# É necessário que o nginx esteja rodando na mesma rede que o container para isso ser possível

# http://nginx.org/en/docs/http/websocket.html
map $http_upgrade $connection_upgrade {
		default upgrade;
		'' close;
}

server {
		listen ${NGINX_PORT} default_server;
		listen [::]:${NGINX_PORT} default_server;

		root /usr/share/nginx/html;
		index index.html index.htm index.nginx-debian.html;

		server_name _;

		location / {
				try_files $uri $uri/ =404;
		}
}

# Porta específica em um container
# prefixo-batata-3333.exemplo.com
server {
		listen ${NGINX_PORT};
		listen [::]:${NGINX_PORT};

		server_name ~^${DOMAIN_PREFIX}(?<container>.+)\-(?<porta>[0-9]+)${SERVER_NAME}$;

		location / {
            resolver ${RESOLVER_IP} valid=10s;
			proxy_set_header X-Real-IP  $remote_addr;
			proxy_set_header X-Forwarded-For $remote_addr;

			#Permitir WebSockets
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection $connection_upgrade;

			proxy_set_header Host $host;
			proxy_http_version 1.1;

			proxy_pass http://$container:$porta$request_uri;
		}
}

# Para permitir acessar pelo número da porta exposta no host
# Se o domain prefix for um texto vazio provavelmente esta regra não será possível ser acessada
# prefixo-porta.exemplo.com
server {
		listen ${NGINX_PORT};
		listen [::]:${NGINX_PORT};

		server_name ~^${DOMAIN_PREFIX}(?<porta>[0-9]+)${SERVER_NAME}$;

		location / {
            resolver ${RESOLVER_IP} valid=10s;
			proxy_set_header X-Real-IP  $remote_addr;
			proxy_set_header X-Forwarded-For $remote_addr;

			#Permitir WebSockets
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection $connection_upgrade;

			proxy_set_header Host $host;
			proxy_http_version 1.1;

			# https://stackoverflow.com/questions/31324981/how-to-access-host-port-from-docker-container
			proxy_pass http://${DOCKER_HOST_IP}:$porta$request_uri;
		}
}

# Porta padrão em um container
# prefixo-batata.exemplo.com
server {
		listen ${NGINX_PORT};
		listen [::]:${NGINX_PORT};

		server_name ~^${DOMAIN_PREFIX}(?<container>.+)${SERVER_NAME}$;

		location / {
            resolver ${RESOLVER_IP} valid=10s;
			proxy_set_header X-Real-IP  $remote_addr;
			proxy_set_header X-Forwarded-For $remote_addr;

			#Permitir WebSockets
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection $connection_upgrade;

			proxy_set_header Host $host;
			proxy_http_version 1.1;

			proxy_pass http://$container:${DEFAULT_PORT}$request_uri;
		}

		
		location = /code {
    		return 302 /code/;
		}

		location /code/ {
            resolver ${RESOLVER_IP} valid=10s;
			proxy_set_header X-Real-IP  $remote_addr;
			proxy_set_header X-Forwarded-For $remote_addr;
			proxy_set_header X-Debug-request-uri $request_uri;
			proxy_set_header X-Debug-uri $uri;

			#Permitir WebSockets
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection $connection_upgrade;

			proxy_set_header Host $host;
			proxy_http_version 1.1;

        	rewrite ^/code/(.*)$ /$1 break;
			proxy_pass http://$container:8080;
		}
}